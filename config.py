import os
# basedir = os.path.abspath(os.path.dirname(__file__))

class Config(object):
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'you-will-never-guess'
# ... add more variables here as needed
#     SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
#         'sqlite:///' + os.path.join(basedir, 'app.db')
#     SQLALCHEMY_TRACK_MODIFICATIONS = False

'''
Конфигурация

Для обработки форм мы будем использовать расширение Flask-WTF,
которое является оберткой WTForms и прекрасно интегрируется с Flask приложениями.

Многие расширения Flask требуют некоторой настройки,
поэтому мы создадим файл конфигурации внутри нашей корневой папки microblog,
так что он будет легко доступен для изменения, если понадобится.
Вот с чего мы начнем (файл config.py):

Все просто, это две настройки, которые нужны нашему расширению Flask-WTF.
CSRF_ENABLED активирует предотвращение поддельных межсайтовых запросов.
В большинстве случаев вы захотите включить эту опцию, что сделает ваше приложение более защищенным.

SECRET_KEY нужен только тогда, когда включен CSRF.
Он используется для создания криптографического токена, который используется при валидации формы.
Когда вы пишете свое приложение, убедитесь, что ваш секретный ключ сложно подобрать.

Теперь у нас есть конфиг, и мы должны сказать Flask'у прочесть и использовать его.
Мы сможем сделать это сразу после того, как объект приложения Flask создан. (файл app/__init__.py):
'''